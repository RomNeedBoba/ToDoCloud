name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up environment variables for MySQL and EC2
    - name: Set up environment variables
      env:
        MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        EC2_USER: ec2-user
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        # Step 3: Decode the private key and prepare for SSH connection
        echo "$EC2_PRIVATE_KEY" | base64 --decode > private-key.pem
        chmod 600 private-key.pem

        # Step 4: Start the SSH agent and add the private key
        eval $(ssh-agent -s)
        ssh-add private-key.pem

        # Step 5: SSH into EC2 and deploy the app
        ssh -o StrictHostKeyChecking=no -i private-key.pem $EC2_USER@$EC2_HOST << 'EOF'
          # Step 6: Navigate to home directory
          cd /home/ec2-user

          # Step 7: Gracefully stop the existing container if it exists
          if sudo docker ps -q -f name=my_todo_app; then
            echo "Stopping existing container..."
            sudo docker stop my_todo_app
            sudo docker rm my_todo_app
          fi

          # Step 8: Clean up unused images to free space
          sudo docker system prune -f

          # Step 9: Remove old project directory
          sudo rm -rf my_todo_app

          # Step 10: Clone the latest code
          git clone https://github.com/RomNeedBoba/ToDoCloud.git
          cd ToDoCloud

          # Step 11: Create .env file with environment variables
          cat > .env << EOF_ENV
          DB_HOST=${MYSQL_HOST}
          DB_USER=${MYSQL_USER}
          DB_PASSWORD=${MYSQL_PASSWORD}
          DB_NAME=${MYSQL_DATABASE}
          PORT=3000
          EOF_ENV

          # Step 12: Build new Docker image
          echo "Building Docker image..."
          sudo docker build -t my_todo_app:latest . || { echo "Docker build failed"; exit 1; }

          # Step 13: Run new container
          echo "Starting new container..."
          sudo docker run -d \
            --name my_todo_app \
            --restart unless-stopped \
            -p 80:3000 \
            -e DB_HOST="${MYSQL_HOST}" \
            -e DB_USER="${MYSQL_USER}" \
            -e DB_PASSWORD="${MYSQL_PASSWORD}" \
            -e DB_NAME="${MYSQL_DATABASE}" \
            -e PORT=3000 \
            my_todo_app:latest

          # Step 14: Verify container is running
          if ! sudo docker ps -q -f name=my_todo_app; then
            echo "Container failed to start!"
            sudo docker logs my_todo_app
            exit 1
          fi

          # Step 15: Wait for application to start
          echo "Waiting for application to start..."
          sleep 10

          # Step 16: Test application
          if curl -f http://localhost:80 >/dev/null 2>&1; then
            echo "Application is running successfully!"
          else
            echo "Application failed to start properly"
            sudo docker logs my_todo_app
            exit 1
          fi

          # Step 17: Test MySQL connection using Node.js inside the container
          echo "Testing MySQL connection..."
          sudo docker exec my_todo_app sh -c 'node -e "const mysql=require('\''mysql2'\'');const conn=mysql.createConnection({host:process.env.DB_HOST,user:process.env.DB_USER,password:process.env.DB_PASSWORD,database:process.env.DB_NAME});conn.connect((err)=>{if(err){console.error(err);process.exit(1)}else{console.log('\''MySQL connection successful'\'');process.exit(0)}})"' || {
            echo "MySQL connection failed!"
            exit 1
          }
        EOF
