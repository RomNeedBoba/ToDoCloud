name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Replace with your AWS Access Key ID from GitHub secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Replace with your AWS Secret Access Key from GitHub secrets
          aws-region: ap-southeast-1

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa  # Use GitHub Secret for SSH Key
          chmod 600 ~/.ssh/id_rsa
          # Use EC2's Public IP (replace with your actual public IP)
          ssh-keyscan -H <your-ec2-public-ip> >> ~/.ssh/known_hosts  # EC2's Public IP address
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}  # GitHub Secret for SSH Key

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          MYSQL_HOST: terraform-20250104092914696400000001.cxkks86y80aw.us-west-2.rds.amazonaws.com  # Replace with your MySQL Host
          MYSQL_USER: RomNeedBoba  # Replace with your MySQL User
          MYSQL_PASSWORD: Makerspace123!  # Replace with your MySQL Password
          MYSQL_DATABASE: todo_app_db  # Replace with your MySQL Database Name
        with:
          host: ${{ secrets.EC2_HOST }}  # The EC2 host should be fetched from GitHub secrets (public IP)
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}  # The SSH key should still be fetched from GitHub secrets
          envs: MYSQL_HOST,MYSQL_USER,MYSQL_PASSWORD,MYSQL_DATABASE
          script: |
            # Navigate to home directory
            cd /home/ec2-user
            # Gracefully stop the existing container
            if sudo docker ps -q -f name=brave_lumiere; then
              echo "Stopping existing container..."
              sudo docker stop brave_lumiere
              sudo docker rm brave_lumiere
            fi
            # Clean up unused images to free space
            sudo docker system prune -f
            # Remove old project directory
            sudo rm -rf cloud-computing-project
            # Clone the latest code
            git clone https://github.com/g3-cloud-computing-project/cloud-computing-project.git
            cd cloud-computing-project
            # Create .env file
            cat > .env << EOF
            DB_HOST=${MYSQL_HOST}
            DB_USER=${MYSQL_USER}
            DB_PASSWORD=${MYSQL_PASSWORD}
            DB_NAME=${MYSQL_DATABASE}
            PORT=3000
            EOF
            # Build new image
            echo "Building Docker image..."
            sudo docker build -t cloud-computing-project:latest . || exit 1
            # Run new container
            echo "Starting new container..."
            sudo docker run -d \
            --name brave_lumiere \
            --restart unless-stopped \
            -p 80:3000 \
            -e DB_HOST="${MYSQL_HOST}" \
            -e DB_USER="${MYSQL_USER}" \
            -e DB_PASSWORD="${MYSQL_PASSWORD}" \
            -e DB_NAME="${MYSQL_DATABASE}" \
            -e PORT=3000 \
            cloud-computing-project:latest
            # Verify container is running
            if ! sudo docker ps -q -f name=brave_lumiere; then
              echo "Container failed to start!"
              sudo docker logs brave_lumiere
              exit 1
            fi
            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 10
            # Test application
            if curl -f http://localhost:80 >/dev/null 2>&1; then
              echo "Application is running successfully!"
            else
              echo "Application failed to start properly"
              sudo docker logs brave_lumiere
              exit 1
            fi
            # Test MySQL connection using node
            echo "Testing MySQL connection..."
            sudo docker exec brave_lumiere sh -c 'node -e "const mysql=require('\''mysql2'\'');const conn=mysql.createConnection({host:process.env.DB_HOST,user:process.env.DB_USER,password:process.env.DB_PASSWORD,database:process.env.DB_NAME});conn.connect((err)=>{if(err){console.error(err);process.exit(1)}else{console.log('\''MySQL connection successful'\'');process.exit(0)}})"' || {
              echo "MySQL connection failed!"
              exit 1
            }
